plugins {
  id 'java'
  id 'application'
  id 'org.jetbrains.kotlin.jvm' version '1.6.10'
  id "com.github.ben-manes.versions" version "0.39.0"
  id 'com.github.johnrengelman.shadow' version '7.1.1'
}

repositories {
  mavenLocal()
  google()
  mavenCentral()
  // Do not place this any higher in the order
  // You will pick up a bad version of io.github.microutils:kotlin-logging
  maven { url = 'https://jitpack.io' }
}

// Specify the snake you want to run with mainName
//def mainName = 'io.battlesnake.examples.kotlin.PerimeterSnakeWithLists'
def mainName = 'io.battlesnake.examples.java.PerimeterSnake'
def appName = 'snake'

sourceCompatibility = 1.8

description = appName
group = 'io.battlenake'
version = '0.2.0'

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "io.ktor:ktor-server-core:$ktor_version"
  implementation "com.github.pambrose:battlesnake-quickstart:${quickstart_version}"
  implementation "io.github.microutils:kotlin-logging:${logging_version}"
  implementation "ch.qos.logback:logback-classic:${logback_version}"
  implementation "org.slf4j:jul-to-slf4j:${slf4j_version}"
}

startScripts.enabled = false

application {
  mainClassName = mainName
}

// This task creates the shell scripts to run the app
task simpleSnake(type: CreateStartScripts, dependsOn: ['shadowJar']) {
  mainClassName = mainName
  applicationName = appName
  outputDir = new File(project.buildDir, 'tmp')
  classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
  from(simpleSnake)
  fileMode = 0755
}

// Include build uberjars in heroku deploy
task stage(dependsOn: ['uberjar', 'build', 'clean'])
build.mustRunAfter clean

shadowJar {
  zip64 true
  mergeServiceFiles()
  exclude "META-INF/*.SF"
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.RSA'
  exclude "LICENSE*"
}

task uberjar(type: Jar, dependsOn: ['shadowJar', 'simpleSnake']) {
  zip64 true
  archiveFileName = 'snake.jar'
  manifest {
    attributes('Implementation-Title': appName)
    attributes('Implementation-Version': version)
    attributes('Built-Date': new Date())
    attributes('Built-JDK': System.getProperty('java.version'))
    attributes('Main-Class': mainName)
  }
  from zipTree(shadowJar.archiveFile)
}

compileKotlin {
  kotlinOptions {
    jvmTarget = '1.8'
    freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                         '-Xuse-experimental=kotlin.ExperimentalStdlibApi',
                         '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI']
  }
}

compileTestKotlin {
  kotlinOptions {
    jvmTarget = '1.8'
    freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                         '-Xuse-experimental=kotlin.ExperimentalStdlibApi',
                         '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI']
  }
}

test {
  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat "full"
    showStandardStreams = true
  }
}